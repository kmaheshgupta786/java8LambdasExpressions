Java8 Lambda Basics


1.1 Introduction

Welcome to the course 'Java 8 Lambda Basics'. This video is a quick introduction to this course and its contents.

- Understanding Lambdas
- Using lambdas
- functional interface
- method reference
- collections improvement

--------------------------------------------------------------------------

1.2 Why Lambdas

Let's look at some high level benefits of Lambdas in Java 8.

- lambdas enables functional programming
- readable and concise code (eliminates boiller code)
- easier to use aps and libraries
- enables support for parallel processing (biggest advantage)

--------------------------------------------------------------------------

1.3 Dev setup

Let's set up our development environment to start writing code in Java 8.

--------------------------------------------------------------------------

1.4 Functional vs Object Oriented Programming

In this video, I address a common concern about functional programming in Java and if it can work with object oriented programming.

--------------------------------------------------------------------------


1.5 Passing Behavior in OOP

Let's look at behavior parameterization - how we can pass behaviors to methods in Java 8 or earlier.

- code in oop, everything is an object
- all code blocks are associated with classes and objects

Greeter.java
-------------

public class Greeter {

	public void greet(Greeting greeting){
		greeting.perform();
	}
	public static void main(String args[]){
		
		Greeter greeter = new Greeter();
		HellowWorldGreeting hellowWorldGreeting = new HellowWorldGreeting();
		greeter.greet(hellowWorldGreeting);
	}
}

Greeting.java
--------------

public interface Greeting {

		public void perform();
		
}

HellowWorldGreeting.java
---------------------------
public class HellowWorldGreeting implements Greeting{

	public void perform(){
		System.out.println("Hellow World Greeting!");
	}
}


above code used normal java... not used lambdas

in next video we will see with lambdas expression how can we get the same output

--------------------------------------------------------------------------
1.6

Java 8 Lambda Basics 6 - Introducing Lambda Expressions

lambda expression means function as value

ie: assign block of code to the variable

in java 7: 
public void perform(){
	sysout("Perform");
}

in java 8:
aBlockOfCode = () -> {
	sysout("perform");
	}

1. as we are assigning mehtod code (method definition) to variable its not required to keep
the method name.
2. public or private access specifiers are at class level.
   in the lambda case the method block is isolated code, so not required to keep the access specifiers.
3. not required return type becoz block of code assign to the variable.


--------------------------------------------------------------------------

1.7 Lambda Expression Examples

Let's now get familiar with the lambda syntax by writing a few more expressions.   

examples:	 

1. greetingFunction = () -> sysout("hellow world");

2. greet(greetingFunction);
or
greet(() -> sysout("hellow world"));

3. doubleNumberFunction = (int a) -> {return a*2};
or
doubleNumberFunction = (int a) ->  a*2;

	 -you should not keep return keyword, if ur lambda expression has only one line code.
	 -if ur lambda expression one line of code enclosed with {} then we can keep return keyword
	 like (int a) -> {return a*2}; ---> its correct syntax
	 (int a) -> return a*2;   ---> wrong syntax
	 
4. addFunction = (int a, int b) -> a+b;

5.safeDivideFunction = (int a, int b) -> {
											if(b==0) return 0;
											return a/b;
										};
										
6. stringLength = (String s) -> s.length();		


--------------------------------------------------------------------------
	
1.8 Lambda as interface type

What is the type of a lambda expression? How do you declare a variable and assign it to a lambda expression? This video provides the answers.




code :
-------

public class Greeter {

	public void greet(Greeting greeting){
		greeting.perform();
	}
	
	public static void main(String args[]){
		
		//java7 - way of implementation
		Greeter greeter = new Greeter();
		HellowWorldGreeting hellowWorldGreeting = new HellowWorldGreeting();
		greeter.greet(hellowWorldGreeting);
		
		//java8 - way of lambda implementation
		myLambda myLambdaExpression = () -> System.out.println("Hellow World by Lambda Expression");	
		Greeting myLambdaExpression2 = () -> System.out.println("Hellow World by Lambda Expression");
		/*
		 * 1. based on right side lambda expression, we should have return type as interface reference variable
		 * 2. At the same time we should not declare multiple methods in the interface, if we are using these 
		 *    interfaces as return type of lambda expressions.
		 *    
		 *    eg: Assume myLambda interface has two methods like
		 *    public void test1();
		 *    public void test2(int a, int b);
		 *    
		 *    and if u run the code like below
		 *    myLambda myLambdaExpression = () -> System.out.println("Hellow World by Lambda Expression");
		 *    it will give compilation error becoz, compiler confuse which method your are going to implement
		 *    even though you has different method signatures.
		 *    
		 *    code snippet:
		 *    public interface myLambda{
					public void test();
					public int add(int a, int b);
				}
	
			  calling time:
			  myLambda myLambdaExpression = () -> System.out.println("Hellow World by Lambda Expression");	
			  right side compiler error :
			  - The target type of this expression must be a functional interface (means it should have only one method declaration in interface).
	
		 */
	}
	
	public interface myLambda{
		public void test();
	}
}

	
	
	the following two stmts are valid
	myLambda myLambdaExpression = () -> System.out.println("Hellow World by Lambda Expression");	
		Greeting myLambdaExpression2 = () -> System.out.println("Hellow World by Lambda Expression");
	
	becoz we have declared two interface which have the same method signatures.
		

--------------------------------------------------------------------------

1.9 Lambdas vs Interface Implementations

This video compares the similarity between lambda expressions and anonymous inner class types.



		//java8 - way of lambda implementation
		myLambda myLambdaExpression = () -> System.out.println("Hellow World by Lambda Expression");	
		Greeting myLambdaExpression2 = () -> System.out.println("Hellow World by Lambda Expression");
		
		myLambdaExpression.test();     // becoz test() defined in myLambda interface
		myLambdaExpression2.perform();  // becoz perform() defined in greeting interface

		console output:
		Hellow World by Lambda Expression
		Hellow World by Lambda Expression
		
		
		------
		anonymous inner class implementation example
		
		
		Greeting myLambdaExpression3 = () -> System.out.println("Hellow World by Lambda Expression3");
		Greeting anonymousInterface = new Greeting(){
			public void perform(){
				System.out.println("Hellow World :: Anonymous Interface Implementation. ");
			}
		};
		
		myLambdaExpression3.perform();
		anonymousInterface.perform();
		
		console out put:
		Hellow World by Lambda Expression3
		Hellow World :: Anonymous Interface Implementation. 

--------------------------------------------------------------------------

1.10 Type Inference

Learn how the Java compiler and runtime infers type information about a lambda expression based on the type it is assigned to.

TypeInterfaceExample.java
-------------------------

public class TypeInterfaceExample {

	public static void main(String[] args) {
		
		StringLengthLambda lengthOfStr = (String s) -> s.length();
		System.out.println("lengthOfStr  " + lengthOfStr.getLenght("Test"));
		
		StringLengthLambda lengthOfStr2 = ( s ) -> s.length();  // need not to keep the iput data type as well, from the reference it understands
		System.out.println("lengthOfStr2  " + lengthOfStr2.getLenght("Test2"));
		
		StringLengthLambda lengthOfStr3 = s  -> s.length();// if ur interface has only one argument then need not to keep the braces ()
		System.out.println("lengthOfStr3  " + lengthOfStr3.getLenght("Test Three"));

	}

	interface StringLengthLambda{
		int getLenght(String s);
	}
}


console output:
lengthOfStr  4
lengthOfStr2  5
lengthOfStr3  10

		
--------------------------------------------------------------------------

1.11 Runnable Using Lambdas

Learn how lambda expressions can be backward compatible by passing a lambda expression to a class that's been around since JDK 1 - The Thread and Runnable types.


explained how to run thread using lambda expression.

RunnableExample.java
--------------------	
public class RunnableExample {

	public static void main(String[] args) {
		
		// java 7 
		Thread myThread = new Thread(new Runnable(){

			@Override
			public void run() {
				System.out.println("Printed inside Runnable Ananymous inner class");
				
			}
			
		});
		
		myThread.run();
		
		
		// java 8
		Thread myLambdaThread = new Thread(() -> System.out.println("Printed using Lamdbda Expression"));
		myLambdaThread.run();
		
	}

}	


console output :
Printed inside Runnable Ananymous inner class
Printed using Lamdbda Expression


* Functional interfaces nothing but the interfaces which has only one abstract method.
eg: Runnable interface
	
--------------------------------------------------------------------------

1.12 Functional Interface

Learn about the term functional interface and how it describes the type of interface you have already learned by now. Also use the @FunctionalInterface annotation to mark such interfaces.


* Functional interfaces nothing but the interfaces which has only one abstract method.
eg: Runnable interface


@FunctionalInterface
public interface Greeting {

		public void perform();
		
}

In above interface if you add one more abstract method, compiler will give error.

@FunctionalInterface
public interface Greeting {  // at interface name it gives error, msg : invalid @FunctionalInterface annotaion ; Greeting is not a functional interface . To work it out have to remove either one of the method.

		public void perform();
		public void perform2();
		
}

--------------------------------------------------------------------------

1.13 Lambda Exercise

Put the knowledge you've learnt so far to the test! Here's an exercise for you to try out. Solution in the next tutorial.


1.14 Lambda Exercise Solution

In this video, I walk through the solution to the exercise in the previous video. I walk you through the solution both in Java 7 and using the Java 8 lambda approach.


Unit1ExcersieSolutionJava7.java
-------------------------------

public class Unit1ExcersieSolutionJava7 {

	public static void main(String[] args) {
		List<Person> people = Arrays.asList(
				new Person("Charles", "Dickens", 60),
				new Person("Lewis", "Carroll", 42),
				new Person("Thomas", "Carlyle", 51),
				new Person("Charlotte", "Bronte", 45),
				new Person("Mathew", "Arnold", 39)
				);

	

	//setp 1 : sort list by last name
	Collections.sort(people, new Comparator<Person>(){

		@Override
		public int compare(Person o1, Person o2) {
			return o1.getLastName().compareTo(o2.getLastName());
		}
	});
	
	//step 2 : create a method that prints all elements in the list
	System.out.println("Printing all list : ");
	printAll(people);
	
	//step 3 : create a method that prints all people that have last name begins with C
	System.out.println("Way 1 : printing people : last name starts with C :");
	printLastNameBeginningWithC(people);
	
	//step 3.1 
	System.out.println("Way 2 : printing people : last name starts with C :");
	printConditionally(people, new Condition(){

		@Override
		public boolean test(Person p) {
			return p.getLastName().startsWith("C");
		}
		
	});

	}

	private static void printConditionally(List<Person> people, Condition condition) {
		for(Person p : people){
			if(condition.test(p)){
				System.out.println(p);
			}			
		}
		
	}

	private static void printLastNameBeginningWithC(List<Person> people) {
		for(Person p : people){
			if(p.getLastName().startsWith("C")){
				System.out.println(p);
			}			
		}
		
	}

	private static void printAll(List<Person> people) {
		for(Person p : people){
			System.out.println(p);
		}
		
	}

}

interface Condition{
	boolean test(Person p);
}

-----

Unit1ExcersieSolutionJava8.java
-------------------------------

public class Unit1ExcersieSolutionJava8 {

	public static void main(String[] args) {
		List<Person> people = Arrays.asList(
				new Person("Charles", "Dickens", 60),
				new Person("Lewis", "Carroll", 42),
				new Person("Thomas", "Carlyle", 51),
				new Person("Charlotte", "Bronte", 45),
				new Person("Mathew", "Arnold", 39)
				);

	

	//setp 1 : sort list by last name
	Collections.sort(people, (p1,p2) -> p1.getLastName().compareTo(p2.getLastName()));		
			
	
	//step 2 : create a method that prints all elements in the list
	System.out.println("Printing all list : ");
	printConditionally(people, p -> true);	
	
	
	//step 3.1 
	System.out.println("Way 2 : printing people : last name starts with C :");
	printConditionally(people, p -> p.getLastName().startsWith("C"));	

	}

	private static void printConditionally(List<Person> people, Condition condition) {
		for(Person p : people){
			if(condition.test(p)){
				System.out.println(p);
			}			
		}
		
	}	
}


--------------------------------------------------------------------------

2.1 Using Function Interfaces

Let's look at some out-of-the-box functional interfaces that come with Java 8 that lets us write some lambda expressions without having to declare an interface first.


check below code snippet of Unit1ExcersieSolutionJava8:

private static void printConditionally(List<Person> people, Condition condition) {
		for(Person p : people){
			if(condition.test(p)){
				System.out.println(p);
			}			
		}
		
	}	
	
Condition condition --> we are using this interface which is declared in Unit1ExcersieSolutionJava7.java file.
And it using for to test the parameter is type of that class or not. to do the same
task java8 has "Predicate" class.
so pls check the predicate class functions, u can find test method.

After replacing the Condition with Predicate class the code looks like
	private static void printConditionally(List<Person> people, Predicate predicate) {
		for(Person p : people){
			if(predicate.test(p)){
				System.out.println(p);
			}			
		}
		
	}	
	
the Predicate class defined in pkg "java.util.function.Predicate";

--------------------------------------------------------------------------

2.2 More Functional Interfaces

Let's contine exploring functional interfaces with another example.

Consumer - Functional interface, which accepts the object and not return any thing.

updated file code :
-----------------

calling time:

//step 2 : create a method that prints all elements in the list
System.out.println("Printing all list : ");
performConditionally(people, p -> true, p -> System.out.println(p));	
	

//method implementation logic	
private static void performConditionally(List<Person> people, Predicate<Person> predicate, Consumer<Person> consumer) {
		for(Person p : people){
			if(predicate.test(p)){
				consumer.accept(p);
			}			
		}
		
	}	
	
	
--------------------------------------------------------------------------
	
2.3 Exception Handling in Lambdas

This video covers the problem of exception handling in lambdas and how the obvious approach is not very elegant.	

